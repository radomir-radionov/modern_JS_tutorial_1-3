///  Modern JavaScript tutorial  ///

// ВВЕДЕНИЕ

// 1.1 Введение в JavaScript

// Что такое JavaScript?

// Изначально JavaScript был создан, чтобы «сделать веб-страницы живыми».
// Программы на этом языке называются скриптами. Они могут встраиваться в HTML и выполняться автоматически при загрузке веб-страницы.
// Скрипты распространяются и выполняются, как простой текст. Им не нужна специальная подготовка или компиляция для запуска.

// Как работают движки?
// Движки сложны. Но основы понять легко.

// Движок (встроенный, если это браузер) читает («парсит») текст скрипта.
// Затем он преобразует («компилирует») скрипт в машинный язык.
// После этого машинный код запускается и работает достаточно быстро.

// Например, в браузере JavaScript может:

// Добавлять новый HTML-код на страницу, изменять существующее содержимое, модифицировать стили.
// Реагировать на действия пользователя, щелчки мыши, перемещения указателя, нажатия клавиш.
// Отправлять сетевые запросы на удалённые сервера, скачивать и загружать файлы (технологии AJAX и COMET).
// Получать и устанавливать куки, задавать вопросы посетителю, показывать сообщения.
// Запоминать данные на стороне клиента («local storage»).

// сильные стороны JavaScript:

// Полная интеграция с HTML/CSS.
// Простые вещи делаются просто.
// Поддерживается всеми основными браузерами и включён по умолчанию.

// 1.2 Справочники и спецификации

// Спецификация ECMA-262
// https://www.ecma-international.org/publications/standards/Ecma-262.htm

// Чтобы почитать о самых последних возможностях, включая те, которые «почти в стандарте»
// (так называемые «stage 3 proposals»), посетите https://github.com/tc39/proposals.

// Справочники

// MDN (Mozilla) JavaScript Reference
// https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference

// MSDN
// https://docs.microsoft.com/ru-ru/

// Таблицы совместимости

// Посмотреть, какие возможности поддерживаются в разных браузерах и других движках, можно в следующих источниках:

// http://caniuse.com – таблицы с информацией о поддержке по каждой возможности языка. Например, чтобы узнать, какие движки поддерживают современные криптографические функции, посетите: http://caniuse.com/#feat=cryptography.
// https://kangax.github.io/compat-table – таблица с возможностями языка и движками, которые их поддерживают и не поддерживают.

// 1.3 Редакторы кода

// Есть два основных типа редакторов: IDE и «лёгкие» редакторы. Многие используют по одному инструменту каждого типа.

// IDE

// Термином IDE (Integrated Development Environment, «интегрированная среда разработки») называют мощные редакторы с
//  множеством функций, которые работают в рамках целого проекта. Как видно из названия, это не просто редактор, а нечто большее.

//  IDE загружает проект (который может состоять из множества файлов), позволяет переключаться между файлами, предлагает автодополнение по коду всего проекта (а не только открытого файла), также она интегрирована с системой контроля версий (например, такой как git), средой для тестирования и другими инструментами на уровне всего проекта.

// Если вы ещё не выбрали себе IDE, присмотритесь к этим:

// Visual Studio Code (бесплатно).
// WebStorm (платно).

// «Лёгкие» редакторы

// «Лёгкие» редакторы менее мощные, чем IDE, но они отличаются скоростью, удобным интерфейсом и простотой.

// Главное отличие между «лёгким» редактором и IDE состоит в том, что IDE работает на уровне целого проекта, поэтому
// она загружает больше данных при запуске, анализирует структуру проекта, если это необходимо, и так далее. Если вы
// работаете только с одним файлом, то гораздо быстрее открыть его в «лёгком» редакторе.

// Следующие варианты заслуживают вашего внимания:

// Atom (кроссплатформенный, бесплатный).
// Sublime Text (кроссплатформенный, условно-бесплатный).
// Notepad++ (Windows, бесплатный).
// Vim и Emacs тоже хороши, если знать, как ими пользоваться.

// 1.4 Консоль разработчика(F12)

// Под сообщением об ошибке находится синий символ >. Он обозначает командную строку, в ней мы можем редактировать
// и запускать JavaScript-команды. Для их запуска нажмите Enter.

// Многострочный ввод
// Обычно при нажатии Enter введённая строка кода сразу выполняется.

// Чтобы перенести строку, нажмите Shift+Enter. Так можно вводить более длинный JS-код.

// Итого

// Инструменты разработчика позволяют нам смотреть ошибки, выполнять команды, проверять значение переменных и ещё много всего полезного.
// В большинстве браузеров, работающих под Windows, инструменты разработчика можно открыть, нажав F12.
// В Chrome для Mac используйте комбинацию Cmd+Opt+J, Safari: Cmd+Opt+C (необходимо предварительное включение «Меню разработчика»).

// ОСНОВЫ JavaScript

// 2.1 Привет, мир!

// Тег «script»
// Программы на JavaScript могут быть вставлены в любое место HTML-документа с помощью тега <script>.

// <script>
// alert( 'Привет, мир!' );
// </script>

// Внешние скрипты

// Файл скрипта можно подключить к HTML с помощью атрибута src:

// <script src="/path/to/script.js"></script>

// Здесь /path/to/script.js – это абсолютный путь до скрипта от корня сайта. Также можно указать
// относительный путь от текущей страницы. Например, src="script.js" будет означать, что файл "script.js" находится в текущей папке.

// Можно указать и полный URL-адрес. Например:

// <script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/3.2.0/lodash.js"></script>

// Для подключения нескольких скриптов используйте несколько тегов:

// <script src="/js/script1.js"></script>
// <script src="/js/script2.js"></script>

// На заметку:

// Как правило, только простейшие скрипты помещаются в HTML. Более сложные выделяются в отдельные файлы.
// Польза от отдельных файлов в том, что браузер загрузит скрипт отдельно и сможет хранить его в кеше.
// Другие страницы, которые подключают тот же скрипт, смогут брать его из кеша вместо повторной загрузки
// из сети. И таким образом файл будет загружаться с сервера только один раз.
// Это сокращает расход трафика и ускоряет загрузку страниц.

// Если атрибут src установлен, содержимое тега script будет игнорироваться.

// <script src="file.js">
//   alert(1); // содержимое игнорируется, так как есть атрибут src
// </script>

// <script src="file.js"></script>
// <script>
//   alert(1);
// </script>

// Итого
// Для добавления кода JavaScript на страницу используется тег <script>
// Атрибуты type и language необязательны.
// Скрипт во внешнем файле можно вставить с помощью <script src="path/to/script.js"></script>.

// 2.2 Структура кода

// Инструкции
// Инструкции – это синтаксические конструкции и команды, которые выполняют действия.

// alert('Привет, мир!')

// Точка с запятой

// alert('Привет')
// alert('Мир')
// В этом случае JavaScript интерпретирует перенос строки как «неявную» точку с запятой. Это называется автоматическая вставка точки с запятой.

// В большинстве случаев новая строка подразумевает точку с запятой. Но «в большинстве случаев» не значит «всегда»!

// В некоторых ситуациях новая строка всё же не означает точку с запятой. Например:

// alert(3 +
// 1
// + 2);

// Комментарии

// Однострочные комментарии начинаются с двойной косой черты //.
// Часть строки после // считается комментарием. Такой комментарий может как занимать строку целиком, так и находиться после инструкции.

// Многострочные комментарии начинаются косой чертой со звёздочкой /* и заканчиваются звёздочкой с косой чертой */.

// Используйте горячие клавиши!
// В большинстве редакторов строку кода можно закомментировать, нажав комбинацию клавиш Ctrl+
// / для однострочного комментария и что-то вроде Ctrl+Shift+/ – для многострочных комментариев
// (выделите кусок кода и нажмите комбинацию клавиш). В системе Mac попробуйте Cmd вместо Ctrl и Option вместо Shift.

// Вложенные комментарии не поддерживаются!
